include "frc/control_loops/control_loops.fbs";
include "frc/control_loops/state_feedback_loop.fbs";

namespace frc.control_loops;

table ProfiledJointStatus {
  // Is the subsystem zeroed?
  zeroed:bool (id: 0);

  // The state of the subsystem, if applicable.  -1 otherwise.
  // TODO(alex): replace with enum.
  state:int (id: 1);

  // If true, we have aborted.
  estopped:bool (id: 2);

  // Position of the joint.
  position:float (id: 3);
  // Velocity of the joint in units/second.
  velocity:float (id: 4);
  // Profiled goal position of the joint.
  goal_position:float (id: 5);
  // Profiled goal velocity of the joint in units/second.
  goal_velocity:float (id: 6);
  // Unprofiled goal position from absoulte zero  of the joint.
  unprofiled_goal_position:float (id: 7);
  // Unprofiled goal velocity of the joint in units/second.
  unprofiled_goal_velocity:float (id: 8);

  // The estimated voltage error.
  voltage_error:float (id: 9);

  // The calculated velocity with delta x/delta t
  calculated_velocity:float (id: 10);

  // Components of the control loop output
  position_power:float (id: 11);
  velocity_power:float (id: 12);
  feedforwards_power:float (id: 13);

  // State of the estimator.
  estimator_state:frc.EstimatorState (id: 14);
}

table HallProfiledJointStatus {
  // Is the subsystem zeroed?
  zeroed:bool (id: 0);

  // The state of the subsystem, if applicable.  -1 otherwise.
  // TODO(alex): replace with enum.
  state:int (id: 1);

  // If true, we have aborted.
  estopped:bool (id: 2);

  // Position of the joint.
  position:float (id: 3);
  // Velocity of the joint in units/second.
  velocity:float (id: 4);
  // Profiled goal position of the joint.
  goal_position:float (id: 5);
  // Profiled goal velocity of the joint in units/second.
  goal_velocity:float (id: 6);
  // Unprofiled goal position from absoulte zero  of the joint.
  unprofiled_goal_position:float (id: 7);
  // Unprofiled goal velocity of the joint in units/second.
  unprofiled_goal_velocity:float (id: 8);

  // The estimated voltage error.
  voltage_error:float (id: 9);

  // The calculated velocity with delta x/delta t
  calculated_velocity:float (id: 10);

  // Components of the control loop output
  position_power:float (id: 11);
  velocity_power:float (id: 12);
  feedforwards_power:float (id: 13);

  // State of the estimator.
  estimator_state:frc.HallEffectAndPositionEstimatorState (id: 14);
}

table PotAndAbsoluteEncoderProfiledJointStatus {
  // Is the subsystem zeroed?
  zeroed:bool (id: 0);

  // The state of the subsystem, if applicable.  -1 otherwise.
  // TODO(alex): replace with enum.
  state:int (id: 1);

  // If true, we have aborted.
  estopped:bool (id: 2);

  // Position of the joint.
  position:float (id: 3);
  // Velocity of the joint in units/second.
  velocity:float (id: 4);
  // Profiled goal position of the joint.
  goal_position:float (id: 5);
  // Profiled goal velocity of the joint in units/second.
  goal_velocity:float (id: 6);
  // Unprofiled goal position from absoulte zero  of the joint.
  unprofiled_goal_position:float (id: 7);
  // Unprofiled goal velocity of the joint in units/second.
  unprofiled_goal_velocity:float (id: 8);

  // The estimated voltage error.
  voltage_error:float (id: 9);

  // The calculated velocity with delta x/delta t
  calculated_velocity:float (id: 10);

  // Components of the control loop output
  position_power:float (id: 11);
  velocity_power:float (id: 12);
  feedforwards_power:float (id: 13);

  // State of the estimator.
  estimator_state:frc.PotAndAbsoluteEncoderEstimatorState (id: 14);
}

table IndexProfiledJointStatus {
  // Is the subsystem zeroed?
  zeroed:bool (id: 0);

  // The state of the subsystem, if applicable.  -1 otherwise.
  // TODO(alex): replace with enum.
  state:int (id: 1);

  // If true, we have aborted.
  estopped:bool (id: 2);

  // Position of the joint.
  position:float (id: 3);
  // Velocity of the joint in units/second.
  velocity:float (id: 4);
  // Profiled goal position of the joint.
  goal_position:float (id: 5);
  // Profiled goal velocity of the joint in units/second.
  goal_velocity:float (id: 6);
  // Unprofiled goal position from absoulte zero  of the joint.
  unprofiled_goal_position:float (id: 7);
  // Unprofiled goal velocity of the joint in units/second.
  unprofiled_goal_velocity:float (id: 8);

  // The estimated voltage error.
  voltage_error:float (id: 9);

  // The calculated velocity with delta x/delta t
  calculated_velocity:float (id: 10);

  // Components of the control loop output
  position_power:float (id: 11);
  velocity_power:float (id: 12);
  feedforwards_power:float (id: 13);

  // State of the estimator.
  estimator_state:frc.IndexEstimatorState (id: 14);
}

table AbsoluteEncoderProfiledJointStatus {
  // Is the subsystem zeroed?
  zeroed:bool (id: 0);

  // The state of the subsystem, if applicable.  -1 otherwise.
  // TODO(alex): replace with enum.
  state:int (id: 1);

  // If true, we have aborted.
  estopped:bool (id: 2);

  // Position of the joint.
  position:float (id: 3);
  // Velocity of the joint in units/second.
  velocity:float (id: 4);
  // Profiled goal position of the joint.
  goal_position:float (id: 5);
  // Profiled goal velocity of the joint in units/second.
  goal_velocity:float (id: 6);
  // Unprofiled goal position from absoulte zero  of the joint.
  unprofiled_goal_position:float (id: 7);
  // Unprofiled goal velocity of the joint in units/second.
  unprofiled_goal_velocity:float (id: 8);

  // The estimated voltage error.
  voltage_error:float (id: 9);

  // The calculated velocity with delta x/delta t
  calculated_velocity:float (id: 10);

  // Components of the control loop output
  position_power:float (id: 11);
  velocity_power:float (id: 12);
  feedforwards_power:float (id: 13);

  // State of the estimator.
  estimator_state:frc.AbsoluteEncoderEstimatorState (id: 14);
}

table AbsoluteAndAbsoluteEncoderProfiledJointStatus {
  // Is the subsystem zeroed?
  zeroed:bool (id: 0);

  // The state of the subsystem, if applicable.  -1 otherwise.
  // TODO(alex): replace with enum.
  state:int (id: 1);

  // If true, we have aborted.
  estopped:bool (id: 2);

  // Position of the joint.
  position:float (id: 3);
  // Velocity of the joint in units/second.
  velocity:float (id: 4);
  // Profiled goal position of the joint.
  goal_position:float (id: 5);
  // Profiled goal velocity of the joint in units/second.
  goal_velocity:float (id: 6);
  // Unprofiled goal position from absoulte zero  of the joint.
  unprofiled_goal_position:float (id: 7);
  // Unprofiled goal velocity of the joint in units/second.
  unprofiled_goal_velocity:float (id: 8);

  // The estimated voltage error.
  voltage_error:float (id: 9);

  // The calculated velocity with delta x/delta t
  calculated_velocity:float (id: 10);

  // Components of the control loop output
  position_power:float (id: 11);
  velocity_power:float (id: 12);
  feedforwards_power:float (id: 13);

  // State of the estimator.
  estimator_state:frc.AbsoluteAndAbsoluteEncoderEstimatorState (id: 14);
}

table RelativeEncoderProfiledJointStatus {
  // Is the subsystem zeroed?
  zeroed:bool (id: 0);

  // The state of the subsystem, if applicable.  -1 otherwise.
  // TODO(alex): replace with enum.
  state:int (id: 1);

  // If true, we have aborted.
  estopped:bool (id: 2);

  // Position of the joint.
  position:float (id: 3);
  // Velocity of the joint in units/second.
  velocity:float (id: 4);
  // Profiled goal position of the joint.
  goal_position:float (id: 5);
  // Profiled goal velocity of the joint in units/second.
  goal_velocity:float (id: 6);
  // Unprofiled goal position from absoulte zero  of the joint.
  unprofiled_goal_position:float (id: 7);
  // Unprofiled goal velocity of the joint in units/second.
  unprofiled_goal_velocity:float (id: 8);

  // The estimated voltage error.
  voltage_error:float (id: 9);

  // The calculated velocity with delta x/delta t
  calculated_velocity:float (id: 10);

  // Components of the control loop output
  position_power:float (id: 11);
  velocity_power:float (id: 12);
  feedforwards_power:float (id: 13);

  // State of the estimator.
  estimator_state:frc.RelativeEncoderEstimatorState (id: 14);
}

table StaticZeroingSingleDOFProfiledSubsystemGoal {
  unsafe_goal:double (id: 0);

  profile_params:frc.ProfileParameters (id: 1);

  // Sets the goal velocity of the subsystem.
  goal_velocity:double (id: 2);

  // If set to true, then we will ignore the profiling on this joint and pass
  // the goal + goal velocity directly to the control loop.
  ignore_profile:bool (id: 3);
}

// Stores everything but the zeroing information for a single-dof subsystem.
// Because the subsystem will be templated on the zeroing information, it is
// passed in separately (see types in //frc/zeroing:constants.fbs).
table StaticZeroingSingleDOFProfiledSubsystemCommonParams {
  zeroing_voltage:double (id: 0);
  operating_voltage:double (id: 1);
  zeroing_profile_params:frc.ProfileParameters (id: 2);
  default_profile_params:frc.ProfileParameters (id: 3);
  range:frc.Range (id: 4);
  loop:[frc.control_loops.fbs.StateFeedbackLoopCoefficients] (id: 5);
}
